(require 'magit)

(setq magit-push-always-verify nil
      git-commit-summary-max-length 80)

(setq magit-visit-ref-behavior '(checkout-any focus-on-ref))

(defun magit-merge-no-ff (revision)
  "Merge REVISION into the current 'HEAD'; leave changes uncommitted.
With a prefix-arg, the merge will be squashed.
\('git merge --no-commit [--squash|--no-ff] REVISION')."
  (interactive
   (list (magit-read-rev "Merge (Manually)" (magit-default-rev))))
  (if revision
      (apply 'magit-run-git
             "merge"
             (magit-rev-to-git revision)
             '("--no-ff"))))

(defun magit-prune-origin (&optional arg)
  (interactive)
  (magit-run-git-async "remote" "prune" "origin"))

(defun magit-remote-update (&optional arg)
  (interactive)
  (magit-run-git-async "remote" "update"))

(defun magit-clean-local-branches (&optional arg)
  (interactive)
  (shell-command "git branch | grep -v develop | grep -v master | xargs git branch -d"))

(defun magit-merge-develop (&optional arg)
  (interactive)
  (magit-run-git "merge" "origin/develop"))

(defun magit-merge-master (&optional arg)
  (interactive)
  (magit-run-git "merge" "--no-edit" "--ff-only" "origin/master"))

(defun magit-push-quickly-set-upstream (&optional args)
  "Push the current branch to some remote.
When the Git variable `magit.pushRemote' is set, then push to
that remote.  If that variable is undefined or the remote does
not exist, then push to \"origin\".  If that also doesn't exist
then raise an error.  The local branch is pushed to the remote
branch with the same name."
  (interactive (list (magit-push-arguments)))
  (-if-let (branch (magit-get-current-branch))
      (-if-let (remote (or (magit-remote-p (magit-get "magit.pushRemote"))
                           (magit-remote-p "origin")))
          (magit-run-git-async "push" "--set-upstream" "-v" args remote branch)
        (user-error "Cannot determine remote to push to"))
    (user-error "No branch is checked out")))


(setq magit-mode-map
      (let ((map (make-keymap)))
        (suppress-keymap map t)
        (cond ((featurep 'jkl)
               (define-key map   [return]  'magit-visit-thing)
               (define-key map [C-return]  'magit-dired-jump)
               (define-key map   [tab]     'magit-section-toggle)
               (define-key map [C-tab]     'magit-section-cycle)
               (define-key map [M-tab]     'magit-section-cycle-diffs)
               (define-key map [S-tab]     'magit-section-cycle-global)
               (define-key map (kbd "M-o") 'magit-section-up)
               (define-key map (kbd   "i") 'magit-section-backward)
               (define-key map (kbd   "k") 'magit-section-forward)
               (define-key map (kbd "M-i") 'magit-section-backward-sibling)
               (define-key map (kbd "M-k") 'magit-section-forward-sibling)
               (define-key map (kbd   "p") 'magit-push)
               (define-key map (kbd   ",") 'magit-delete-thing)
               (define-key map (kbd   ";") 'magit-file-untrack)
               (define-key map (kbd "C-c C-i") 'magit-gitignore))
              (t
               (define-key map [C-return]  'magit-visit-thing)
               (define-key map (kbd "C-m") 'magit-visit-thing)
               (define-key map (kbd "C-M-i") 'magit-dired-jump)
               (define-key map (kbd "C-i") 'magit-section-toggle)
               (define-key map [C-tab]     'magit-section-cycle)
               (define-key map [M-tab]     'magit-section-cycle-diffs)
               ;; [backtab] is the most portable binding for Shift+Tab.
               (define-key map [backtab]   'magit-section-cycle-global)
               (define-key map (kbd   "^") 'magit-section-up)
               (define-key map (kbd   "p") 'magit-section-backward)
               (define-key map (kbd   "n") 'magit-section-forward)
               (define-key map (kbd "M-p") 'magit-section-backward-sibling)
               (define-key map (kbd "M-n") 'magit-section-forward-sibling)
               ;; (define-key map (kbd   "P") 'magit-push)
               (define-key map (kbd   "k") 'magit-delete-thing)
               (define-key map (kbd   "K") 'magit-file-untrack)
               (define-key map (kbd   "i") 'magit-gitignore)
               (define-key map (kbd   "I") 'magit-gitignore)))
        (define-key map (kbd "SPC") 'magit-diff-show-or-scroll-up)
        (define-key map (kbd "DEL") 'magit-diff-show-or-scroll-down)
        (define-key map "+"         'magit-diff-more-context)
        (define-key map "-"         'magit-diff-less-context)
        (define-key map "0"         'magit-diff-default-context)
        (define-key map "1"         'magit-section-show-level-1)
        (define-key map "2"         'magit-section-show-level-2)
        (define-key map "3"         'magit-section-show-level-3)
        (define-key map "4"         'magit-section-show-level-4)
        (define-key map (kbd "M-1") 'magit-section-show-level-1-all)
        (define-key map (kbd "M-2") 'magit-section-show-level-2-all)
        (define-key map (kbd "M-3") 'magit-section-show-level-3-all)
        (define-key map (kbd "M-4") 'magit-section-show-level-4-all)
        (define-key map "$" 'magit-process-buffer)
        (define-key map "%" 'magit-worktree)
        (define-key map "a" 'magit-cherry-apply)
        (define-key map "A" 'magit-cherry-pick)
        ;; (define-key map "b" 'magit-branch)
        ;; (define-key map "B" 'magit-bisect)
        (define-key map "c" 'magit-commit)
        (define-key map "C" 'magit-clone)
        (define-key map "d" 'magit-diff)
        (define-key map "D" 'magit-diff-refresh)
        (define-key map "e" 'magit-ediff-dwim)
        (define-key map "E" 'magit-ediff)
        (define-key map "f" 'magit-fetch)
        ;; (define-key map "F" 'magit-pull)
        (define-key map "g" 'magit-refresh)
        (define-key map "G" 'magit-refresh-all)
        ;; (define-key map "h" 'magit-dispatch)
        (define-key map "?" 'magit-dispatch)
        ;; (define-key map "l" 'magit-log)
        (define-key map "L" 'magit-log)
        (define-key map "m" 'magit-merge)
        ;; (define-key map "M" 'magit-remote)
        (define-key map "o" 'magit-submodule)
        (define-key map "O" 'magit-subtree)
        (define-key map "q" 'magit-mode-bury-buffer)
        (define-key map "r" 'magit-rebase)
        (define-key map "R" 'magit-file-rename)
        (define-key map "t" 'magit-tag)
        (define-key map "T" 'magit-notes)
        (define-key map "s" 'magit-stage-file)
        (define-key map "S" 'magit-stage-modified)
        (define-key map "u" 'magit-unstage-file)
        (define-key map "U" 'magit-unstage-all)
        (define-key map "v" 'magit-revert-no-commit)
        ;; (define-key map "V" 'magit-revert)
        (define-key map "w" 'magit-am)
        (define-key map "W" 'magit-patch)
        (define-key map "x" 'magit-reset-quickly)
        (define-key map "X" 'magit-reset)
        (define-key map "y" 'magit-show-refs)
        ;; (define-key map "Y" 'magit-cherry)
        (define-key map "z" 'magit-stash)
        (define-key map "Z" 'magit-stash)
        (define-key map ":" 'magit-git-command)
        (define-key map "!" 'magit-run)
        (define-key map (kbd "C-c C-c") 'magit-dispatch)
        (define-key map (kbd "C-c C-e") 'magit-edit-thing)
        (define-key map (kbd "C-c C-o") 'magit-browse-thing)
        (define-key map (kbd "C-c C-w") 'magit-browse-thing)
        (define-key map (kbd "C-x a")   'magit-add-change-log-entry)
        (define-key map (kbd "C-x 4 a") 'magit-add-change-log-entry-other-window)
        (define-key map (kbd "C-w")     'magit-copy-section-value)
        (define-key map (kbd "M-w")     'magit-copy-buffer-revision)
        (define-key map [remap previous-line]      'magit-previous-line)
        (define-key map [remap next-line]          'magit-next-line)
        (define-key map [remap evil-previous-line] 'evil-previous-visual-line)
        (define-key map [remap evil-next-line]     'evil-next-visual-line)
        ;; my additions
        (define-key map (kbd "V") 'magit-show-refs)
        (define-key map (kbd "J") 'magit-prune-origin)
        (define-key map (kbd "Y") 'magit-push)
        (define-key map (kbd "H") 'magit-merge-develop)
        (define-key map (kbd "Q") 'magit-merge-master)
        (define-key map (kbd "N") 'magit-clean-local-branches)
        ;; my changes
        ;; (define-key map (kbd "!") 'magit-shell-command)
        ;; (define-key map (kbd "t") 'magit-tag)
        ;; (define-key map "r" 'magit-rebase)
        ;; (define-key map "R" 'magit-rebase)
        (define-key map (kbd "P") 'magit-push-quickly-set-upstream)
        (define-key map (kbd "f") 'magit-fetch)
        (define-key map (kbd "b") 'magit-checkout)
        (define-key map (kbd "B") 'magit-branch-and-checkout)
        (define-key map (kbd "F") 'magit-fetch-all)
        (define-key map (kbd "l") 'magit-log-current)
        map))

(setq magit-status-mode-map
      (let ((map (make-sparse-keymap)))
        (set-keymap-parent map magit-mode-map)
        ;; my changes
        (define-key map (kbd "b") 'magit-checkout)
        (define-key map (kbd "B") 'magit-branch-and-checkout)
        ;; (define-key map (kbd "m") 'magit-merge-no-ff)
        (define-key map (kbd "M") 'magit-merge)
        ;; (define-key map (kbd "z") 'magit-stash)
        ;; (define-key map "r" 'magit-rebase)
        map))

(setq magit-display-buffer-function
      'magit-display-buffer-traditional)

;; magit performance tracking
;; (setq magit-refresh-status-buffer nil)
(magit-toggle-verbose-refresh)
